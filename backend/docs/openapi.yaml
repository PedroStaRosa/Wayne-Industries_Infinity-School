openapi: 3.0.3
info:
  title: API - Projeto TCC
  description: API para gerenciamento de usuários, recursos e logs com autenticação JWT.
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Servidor Local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, manager, employee]

    Resource:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        status:
          type: string

    Log:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        action_description:
          type: string
        created_at:
          type: string
          format: date-time

security:
  - bearerAuth: []

paths:
  /login:
    post:
      summary: Autenticação de usuário
      description: Retorna token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  msg:
                    type: string
        '401':
          description: Credenciais inválidas
        '500':
          description: Erro interno

  /createUser:
    post:
      summary: Criar novo usuário
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                role: { type: string, enum: [admin, manager, employee] }
      responses:
        '201':
          description: Usuário criado
        '403':
          description: Permissão negada
        '500':
          description: Erro interno

  /users:
    put:
      summary: Atualizar usuário (role)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId: { type: integer }
                newRole: { type: string, enum: [admin, manager, employee] }
      responses:
        '200':
          description: Usuário atualizado
        '403':
          description: Permissão negada

    get:
      summary: Listar usuários
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '403':
          description: Permissão negada

  /users/{id}:
    delete:
      summary: Deletar usuário
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Usuário deletado
        '403':
          description: Permissão negada

  /resources:
    get:
      summary: Listar recursos
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de recursos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'

    post:
      summary: Criar recurso
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nameResource: { type: string }
                typeResource: { type: string }
                statusResource: { type: string }
      responses:
        '201':
          description: Recurso criado
        '403':
          description: Permissão negada

  /resources/{id}:
    get:
      summary: Buscar recurso por ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: Recurso encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '404':
          description: Recurso não encontrado

    put:
      summary: Atualizar recurso
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                type: { type: string }
                status: { type: string }
      responses:
        '200':
          description: Recurso atualizado
        '403':
          description: Permissão negada

    delete:
      summary: Deletar recurso
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: Recurso deletado
        '403':
          description: Permissão negada

  /logs:
    get:
      summary: Listar logs
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer }
          required: false
      responses:
        '200':
          description: Lista de logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
